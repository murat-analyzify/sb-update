{{ 'component-pickup-locations.css' | asset_url | stylesheet_tag }}

{% stylesheet %}
  .cart-items {
    --cart-item-media-width-min: 5.4rem;
    --cart-item-media-width-max: 11.8rem;

    container-name: cart-items;
    container-type: inline-size;
    width: 100%;
  }
  .cart-page .pickup-locations {
      border: none !important;
      padding: 0;
      width:290px;
  }
.cart-page__title {
  margin-bottom: 24px;
}

  .cart__summary-inner,
  .cart-items__wrapper {
    --cart-primary-font-family: var(--font-body--family);
    --cart-primary-font-style: var(--font-body--style);
    --cart-primary-font-weight: var(--font-body--weight);
  }

  .cart-items-disabled {
    pointer-events: none;
  }

  .cart-items__table {
    width: 100%;
  }

  .cart-items__table * {
    margin: 0;
  }


  .cart-items__table-row {
    display: grid;
    grid-template-columns: clamp(6.4rem, 22cqi, 11.8rem) minmax(0, 1fr);
    grid-template-areas: 'media details' 'media quantity' 'media error';
    column-gap: var(--gap-md);
    align-items: start;
    margin-top: 20px;
  }

  .cart-items__table-row:not(:first-child) {
    border-top: 1px solid var(--color-border);
    padding-top: 24px;
  }

  html:active-view-transition-type(page-navigation) .cart-items__table-row {
    view-transition-name: none !important;
  }

  .cart-items__table-row.removing {
    overflow: hidden;
    animation: removeRow calc(var(--animation-speed) * 2) var(--animation-easing) forwards;
    animation-delay: var(--animation-speed);
  }

  @keyframes removeRow {
    0% {
      height: var(--row-height);
    }

    100% {
      opacity: 0;
      height: 0;
      padding-bottom: 0;
      margin-bottom: 0;
      border-color: transparent;
    }
  }

  .cart-items__table-row:last-child {
    padding-bottom: 20px;
    margin-bottom: 20px;
  }

  .cart-items--dividers .cart-items__table-row {
    /* border-bottom: 1px solid var(--color-border); */
    margin-bottom: var(--cart-items-gap);
  }

  .cart-items--dividers .cart-items__table-row:last-child {
    border-block-end: none;
    padding-block-end: 0;
    margin-bottom: 0;
  }

  .cart-items__details {
    grid-area: details;
    color: rgb(from var(--color-foreground) r g b / 70%);
  }

  .cart-items__details > * + *, /*
   .cart-items__bundle li {
   margin-block-start: 4px;
   }
*/

  .cart-items__details * {
    font-size: var(--cart-font-size--sm);
  }

  .cart-items__details a {
    text-decoration: none;
  }

  .cart-items__title {
    font-size: var(--cart-font-size--md);
    color: var(--color-foreground);
    text-transform: var(--product-title-case);
  }

  .cart-items__variant {
    display: inline-block;
    margin-top: -2px;
  }

  .cart-items__variant:first-child {
    margin-top: 0;
  }

  .cart-items__quantity {
    grid-area: quantity;
    margin-block-start: var(--margin-xs);
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: var(--gap-xs);
    width: 100%;
  }

  .cart-items__quantity .quantity-selector {
    display: inline-flex;
    flex: 0 1 var(--quantity-selector-width);
    font-size: var(--cart-font-size--sm);
    height: auto;
  }

  .cart-items__remove {
    background-color: transparent;
    color: #999999;
    width: var(--minimum-touch-target);
    height: var(--minimum-touch-target);
    justify-content: center;
    box-shadow: none;
    padding: 0;
  }

  .cart-items__remove svg {
    width: 24px;
    height: 24px;
  }

  .cart-items__media {
    grid-area: media;
    padding: 0;
  }

  .cart-items__price {
    grid-area: price;
    min-height: unset;
    text-align: end;
    display: block;
    font-size: var(--cart-font-size--md);
  }

  .cart-items__price-unit {
    font-size: var(--cart-font-size--xs);
  }

  .cart-items__media-container {
    display: flex;
    aspect-ratio: var(--ratio);
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .cart-items__media-image {
    aspect-ratio: inherit;
    object-fit: contain;
    object-position: center center;
    width: 100%;
    height: auto;
  }

  .cart-items__empty-button {
    margin-top: var(--margin-md);
    padding-inline: var(--padding-4xl);
    padding-block: var(--padding-lg);
    margin-bottom: 32px;
  }
 .cart-drawer__items h4 {
    margin-bottom: 0;
  }
 /* .cart-items__empty-button p {
  margin-top:8px!important;
 } */

  /* Error message */
  .cart-items__error {
    display: flex;
    align-items: flex-start;
    width: 100%;
    grid-area: error;
    margin-block-start: var(--margin-xs);
    opacity: 1;
    overflow: hidden;
    transform: translateY(0);
    transition: opacity var(--drawer-animation-speed) var(--animation-easing)
    , transform var(--drawer-animation-speed) var(--animation-easing);

    @starting-style {
      opacity: 0;
      transform: translateY(-0.5rem);
    }
  }

  .cart-item__error {
    display: flex;
    align-items: flex-start;
    width: 100%;
    font-size: var(--cart-font-size--sm);
    padding-block: var(--padding-2xs);
  }

  .cart-item__error .svg-wrapper {
    flex-shrink: 0;
    width: var(--icon-size-xs);
    height: var(--icon-size-xs);
    margin-inline: var(--margin-3xs) var(--margin-xs);
    margin-block-start: var(--margin-3xs);
  }

  @container cart-items(width > = 720px) {
    .cart-items__table-row {
      grid-template-columns: 11.8rem 1fr;
      grid-template-rows: min-content 1fr;
      grid-template-areas: 'media details' 'media quantity';
    }

    .cart-items__quantity,
    .cart-items__price {
      grid-area: initial;
    }

    .cart-items__quantity {
      margin-top: 0;
    }

    .cart-items__price {
      min-height: var(--minimum-touch-target);
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      justify-content: center;
    }
  }

  .cart__original-total-container,
  .cart__total-container {
    display: flex;
    flex-direction: column;
  }


  .cart__original-total-container:empty {
    display: none;
  }

  .cart__summary-totals {
    display: flex;
    flex-direction: column;
    gap: var(--gap-xl);
    margin-top: 12px;
    width: 100%;
    border-block-start: none;

     &:has( > :first-child:not(.cart__original-total-container, .cart__total-container)) {
      padding-block-start: 0;
      border-block-start: none;
    }

    @media screen and (width > = 750px) {
      padding-block-start: 0;
    }
  }

  .cart__original-total-container,
  .cart__original-total-container * {
    font-size: var(--cart-font-size--sm);
  }

  .cart__total {
    font-weight: var(--font-weight-bold);
  }

  .cart__total-label {
    font-size: var(--cart-font-size--sm);
  }

  .cart__total-value {
    font-size: var(--cart-font-size--2xl);
  }

  .cart-primary-typography {
    font-family: var(--cart-primary-font-family);
    font-style: var(--cart-primary-font-style);
    font-weight: var(--cart-primary-font-weight);
  }

  .cart-secondary-typography {
    font-family: var(--cart-secondary-font-family);
    font-style: var(--cart-secondary-font-style);
    font-weight: var(--cart-secondary-font-weight);
  }

  .cart__ctas {
    width: 100%;
    display: grid;
    gap: var(--checkout-button-gap);
    grid-auto-flow: row;
    grid-template-columns: 1fr;
  }

  .cart__ctas .cart__checkout-button {
    width: 100%;
    height: clamp(25px, var(--height-buy-buttons), 55px);
    padding-inline: var(--padding-4xl);
  }

  shopify-accelerated-checkout-cart {
    --shopify-accelerated-checkout-inline-alignment: center;
    --shopify-accelerated-checkout-button-border-radius: var(--style-border-radius-buttons-primary);
  }

  .cart-note {
    width: 100%;
  }

  .cart-note__inner {
    padding-block: var(--padding-2xs) var(--padding-sm);
  }

  .cart-note__summary {
    display: flex;
    align-items: center;
    justify-content: start;
    flex-direction: row;
    text-decoration: underline;
  }
  summary .svg-wrapper {
    margin-inline-start: 0;
  }
  .cart-note__label {
    margin-right: 4px;
  }

  .cart-note__summary:hover {
    color: rgb(from var(--color-foreground) r g b / var(--opacity-subdued-text));
  }
  .cart-note details.details {
    margin-bottom: 10px;
  }
  .cart-note__label {
    display: flex;
    align-items: flex-start;
    gap: var(--gap-2xs);
    font-size: var(--cart-font-size--sm);
    margin: 0;
  }

  .cart-note__instructions {
    color: var(--color-input-text);
    background-color: var(--color-input-background);
    border-width: var(--style-border-width-inputs);
    border-color: var(--color-input-border);
    transition: box-shadow var(--animation-speed) ease;
    box-shadow: var(--input-box-shadow);
    min-height: 5.5rem;
    min-width: 100%;
    max-width: 100%;
    font-size: var(--cart-font-size--sm);
  }
  span.cart-items__variant-value {
    display: block;
    max-width: 100%;
    overflow-wrap: break-word;
    word-break: break-word;
}
  /* Cart page variant styles */
  .cart-page .cart-items__variants {
    margin-top: 8px;
  }
  .cart-page .cart-items__variant {
    display: flex;
    flex-wrap: wrap;
    align-items: baseline;
    margin-bottom: 8px;
    font-size: 14px;
    line-height: 1.4;
  }
  .cart-page .cart-items__variant-label {
    width: 30%;
    min-width: 80px;
    font-weight: 500;
    color: #333;
    padding-right: 8px;
  }
  .cart-page .cart-items__variant-value {
    width: 70%;
    color: #666;
    word-break: break-all;
    overflow-wrap: break-word;
  }
  @media screen and (max-width: 749px) {
    .cart-page .cart-items__variant {
      font-size: 13px;
    }
    .cart-page .cart-items__variant-label {
      width: 50%;
      min-width: auto;
    }
    .cart-page .cart-items__variant-value {
      width: 100%;
      text-align: left;
      color: #666;
      word-break: break-word;
      overflow-wrap: break-word;
      display: block;
      margin-top: 4px;
    }
  }
{% endstylesheet %}


<script src="{{ 'component-cart-items.js' | asset_url }}" type="module"></script>

<script>
  if (typeof routes === 'undefined') {
    window.routes = {
      cart_change_url: '/cart/change.js',
      cart_url: '/cart',
      cart_add_url: '/cart/add.js',
      cart_update_url: '/cart/update.js'
    };
  }

  // fetchConfig fonksiyonu (eğer tanımlı değilse)
  if (typeof fetchConfig === 'undefined') {
    function fetchConfig(type = 'json') {
      return {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json', 
          'Accept': `application/${type}` 
        },
      };
    }
    window.fetchConfig = fetchConfig;
  }

  // Pickup Availability JavaScript for Cart
  let cartInventoryParser = {
    inventoryJson: {},
    locationMap: {
      "gid://shopify/Location/21433221174": "Houston Curbside Pickup",
      "gid://shopify/Location/21364015158": "Inwood Curbside Pickup",
      "gid://shopify/Location/21913600054": "Outlet Curbside Pickup",
      "gid://shopify/Location/60916564022": "Southlake Curbside Pickup",
      "gid://shopify/Location/62768611382": "San Antonio Curbside Pickup",
      "gid://shopify/Location/63259443254": "Austin Curbside Pickup"
    },
    
    loadData: function(variantId, inventoryJson) {
      let selectedVariantId = variantId;
      return inventoryJson.inventory["gid://shopify/ProductVariant/" + selectedVariantId];
    },
    
    createDropdown: function(inventoryData, dropdownElem, selectedLoc = "", itemWeight, lineId) {
      let selectBox = document.createElement('select');
      selectBox.id = "pickup-select-" + lineId;
      selectBox.name = "properties[Shipping Option]";
      // Change event listener ekle
      selectBox.addEventListener('change', function(event) {
        // Sadece gerçekten değişiklik olduğunda istek at
        const previousValue = this.dataset.previousValue || this.options[0]?.value;
        const currentValue = event.target.value;
        
        if (previousValue !== currentValue) {
          // Önceki değeri sakla
          this.dataset.previousValue = currentValue;
          
          // Shipping option güncelleme isteği at
          cartInventoryParser.updateSelectedPickup(event);
        }
      });
      
      // Add "Ship to me" option
      if (itemWeight != '9999.0') {
        var option = document.createElement('option');
        option.text = "Ship To Me";
        option.value = "Ship to me";
        
        if (selectedLoc == "Ship to me") {
          option.selected = true;
        }
        selectBox.appendChild(option);
      }
      
      // Loop over the locations in our location map
      for (i in cartInventoryParser.locationMap) {
        // Skip if we don't have this location in the inventory object
        if (typeof(inventoryData[i]) == "undefined") {
          continue;
        }
        
        var option = document.createElement('option');
        option.value = "pickup " + cartInventoryParser.locationMap[i];
        
        if (selectedLoc == i || selectedLoc == "pickup " + cartInventoryParser.locationMap[i]) {
          option.selected = true;
        }
        
        option.text = cartInventoryParser.locationMap[i] + " - " + inventoryData[i];
        if (inventoryData[i] <= 0) {
          option.disabled = true;
        }
        selectBox.appendChild(option);
      }
      
      // Başlangıç değerini sakla
      const initialValue = selectedLoc || "Ship to me";
      selectBox.dataset.previousValue = initialValue;
      
      dropdownElem.innerHTML = "";
      dropdownElem.appendChild(selectBox);
      
      // Component yüklendi, görünür yap (sadece cart page'de)
      if (document.querySelector('.cart-page')) {
        dropdownElem.style.opacity = '1';
        dropdownElem.style.visibility = 'visible';
      }
    },
    
    updateSelectedPickup: function(event) {
      // Seçilen değeri al
      const selectedValue = event.target.value;
      const lineId = event.target.parentElement.dataset.lineId;
      
      // İstek gövdesini hazırla
      const body = JSON.stringify({
        line: lineId,
        properties: {
          'Shipping Option': selectedValue,
        }
      });
      
      // Loading state göster (opsiyonel)
      event.target.disabled = true;
      
      // Cart change URL'ini belirle
      const cartChangeUrl = (typeof routes !== 'undefined' && routes.cart_change_url) 
        ? routes.cart_change_url 
        : '/cart/change.js';
      
      // Debug için
      console.log('Sending request to:', cartChangeUrl);
      console.log('Request body:', body);
      console.log('Line ID:', lineId);
      
      // Shopify cart change API'sine istek at
      fetch(cartChangeUrl, { ...fetchConfig(), ...{ body } })
      .then((response) => {
        console.log('Response status:', response.status);
        console.log('Response ok:', response.ok);
        
        if (!response.ok) {
          throw new Error(`Network response was not ok: ${response.status}`);
        }
        return response.json();
      })
      .then((data) => {
        event.target.disabled = false;
        
        window.location.reload();
      })
      .catch((error) => {
        console.error('Error updating shipping option:', error);
        console.error('Error details:', error.message);
        
        // Hata durumunda select'i eski haline getir
        event.target.disabled = false;
        alert('Shipping option güncellenirken bir hata oluştu: ' + error.message);
      });
    }
  };
  
  function initCartPickupSelects() {
    let products = document.querySelectorAll('[data-inventory-json]');
    for (elem of products) {
      let inventoryData = cartInventoryParser.loadData(
        elem.dataset.productVariantId, 
        JSON.parse(elem.dataset.inventoryJson)
      );
      
      let dropDownHolder = document.getElementById('pickup_select_holder_' + elem.dataset.productVariantId);
      if (!dropDownHolder) continue;
      
      let itemWeight = elem.dataset.weight;
      let lineId = dropDownHolder.dataset.lineId;
      let selectedOption = dropDownHolder.dataset.selectedOption;
      
      cartInventoryParser.createDropdown(inventoryData, dropDownHolder, selectedOption, itemWeight, lineId);
    }
  }
  
  window.addEventListener('load', function () {
    initCartPickupSelects();
    
    // Re-initialize when cart updates
    if (typeof subscribe !== 'undefined' && typeof PUB_SUB_EVENTS !== 'undefined') {
      subscribe(PUB_SUB_EVENTS.cartUpdate, () => {
        initCartPickupSelects();
      });
    }
  });
</script>

<div
  {{ block.shopify_attributes }}
  class="cart-items__wrapper"
  {% if settings.product_title_case == 'uppercase' %}
  style="--product-title-case: uppercase;"
  {% endif %}>
  {% if cart.empty? %}
    <a class="button cart-items__empty-button" href="{{ routes.all_products_collection_url }}">
      {{ 'actions.continue_shopping' | t }}
    </a>
  {% endif %}
  {% if cart.empty? %}
    {%- if shop.customer_accounts_enabled and customer == null -%}
      <h4>
        {{'actions.log_in_html_title' | t}}
      </h4>
      <p style="margin-top:8px!important;">
        <a href="{{ routes.account_login_url }}">{{ 'actions.log_in' | t }}</a> {{ 'actions.log_in_suffix' | t }}
      </p>
    {%- endif -%}

  {%- else -%}
    <span
      class="visually-hidden"
      ref="cartItemCount"
      aria-hidden="true">
      {{- cart.item_count -}}
    </span>
    <form
      action="{{ routes.cart_url }}"
      class="cart-form"
      id="cart-form"
      method="post">
      <div class="cart-items spacing-style{% if block.settings.dividers %} cart-items--dividers{% endif %}" style="{%  render 'spacing-style', settings: block.settings %} --cart-items-gap:{{ block.settings.gap | append: "px" }};">
        <table class="cart-items__table" role="table">
          <caption class="visually-hidden" role="caption">
            {{ 'content.cart_total' | t }}
            <span>{{ cart.total_price | money_with_currency }}</span>
          </caption>

          <thead class="visually-hidden" role="rowgroup">
            <tr role="row" class="cart-items__table-row">
              <th
                id="productImage"
                scope="col"
                role="columnheader">
                {{ 'content.product_image' | t }}
              </th>
              <th
                id="productInformation"
                scope="col"
                role="columnheader">
                {{ 'content.product_information' | t }}
              </th>
              <th
                id="quantity"
                scope="col"
                role="columnheader">
                {{ 'content.quantity' | t }}
              </th>
              <th
                id="productTotal"
                scope="col"
                role="columnheader">
                {{ 'content.product_total' | t }}
              </th>
            </tr>
          </thead>

          <tbody role="rowgroup">
            {% for item in cart.items %}
              <tr
                role="row"
                class="cart-items__table-row"
                ref="cartItemRows[]">
                <td
                  class="cart-items__media"
                  role="cell"
                  headers="productImage">
                  {% if item.image -%}
                    {% liquid
                      assign ratio = 0.75
                      if block.settings.image_ratio == 'portrait'
                        assign ratio = 0.75
                      elsif block.settings.image_ratio == 'adapt'
                        assign ratio = 0.75
                      endif
                    %}
                    <a
                      href="{{ item.url }}"
                      class="cart-items__media-container"
                      style="--ratio:{{ ratio }};">
                      {%- liquid
                        echo item.image | image_url: width: 250 | image_tag: class: 'cart-items__media-image'
                      -%}
                    </a>
                  {%- endif %}
                </td>
                <td
                  class="cart-items__details cart-primary-typography"
                  role="cell"
                  headers="productInformation">
                  {% if item.product.vendor and item.product.vendor != blank %}
                    <p style="font-weight: 600">
                      {{ item.product.vendor }}
                    </p>
                  {% endif %}
                  <p style="margin-top:0;width: 80%;">
                    <a
                      href="{{ item.url }}"
                      class="cart-items__title"
                      style="font-weight: 600;font-size: 14px;">
                      {% liquid
                        assign clean_title = item.product.title
                        if item.product.vendor and item.product.vendor != blank
                          assign vendor_upper = item.product.vendor | upcase
                          assign title_upper = item.product.title | upcase
                          if title_upper contains vendor_upper
                            assign vendor_length = vendor_upper.size
                            assign title_start = title_upper | slice: 0, vendor_length
                            if title_start == vendor_upper
                              assign clean_title = item.product.title | slice: vendor_length, item.product.title.size
                              assign clean_title = clean_title | strip
                            endif
                          endif
                        endif
                      %}
                      {{- clean_title -}}
                    </a>

                  </p>

                  {%- if item.item_components.size != 0 -%}
                    <ul class="cart-items__bundle list-unstyled">
                      {%- for component in item.item_components -%}
                        <li>
                          {{- component.title -}}
                          {%- if component.quantity > 1 -%}
                            <span>
                              × {{ component.quantity }}</span>
                          {%- endif -%}
                        </li>
                      {%- endfor -%}
                    </ul>
                  {%- endif -%}

                  {%- if item.product.has_only_default_variant == false or item.properties.size != 0 or item.selling_plan_allocation != null
                  -%}
                    <div class="cart-items__variants">
                      {%- if item.product.has_only_default_variant == false and item.item_components.size == 0 -%}
                        {%- for option in item.options_with_values -%}
                          <div class="cart-items__variant">
                            <span class="cart-items__variant-label">{{ option.name }}:</span>
                            <span class="cart-items__variant-value">{{- option.value -}}</span>
                          </div>
                        {%- endfor -%}
                      {%- endif -%}

                      {% comment %} Tüm properties'i göster (Shipping Option ve Pickup Location hariç) {% endcomment %}
                      {%- for property in item.properties -%}
                        {% unless property.first contains '_' or property.first == 'Shipping Option' or property.first == 'Pickup Location' %}
                          {% assign property_name = property.first | split: '' %}
                          {% assign formatted_name = '' %}
                          {%- for char in property_name -%}
                            {%- if forloop.first -%}
                              {% assign formatted_name = formatted_name | append: char %}
                            {%- else -%}
                              {%- assign char_upcase = char | upcase -%}
                              {%- if char == char_upcase and forloop.index0 > 0 -%}
                                {% assign formatted_name = formatted_name | append: ' ' | append: char %}
                              {%- else -%}
                                {% assign formatted_name = formatted_name | append: char %}
                              {%- endif -%}
                            {%- endif -%}
                          {%- endfor -%}
                          {% assign property_name = formatted_name | strip %}
                          <div class="cart-items__variant">
                            <span class="cart-items__variant-label">{{ property_name }}:</span>
                            <span class="cart-items__variant-value">{{ property.last }}</span>
                          </div>
                        {% endunless %}
                      {%- endfor -%}

                    </div>

                    {% if item.selling_plan_allocation %}
                      <p>{{ item.selling_plan_allocation.selling_plan.name }}</p>
                    {% endif %}
                  {%- endif -%}

                  {% if item.line_level_discount_allocations.size > 0 %}
                    <ul class="list-unstyled" role="list">
                      {%- for discount in item.line_level_discount_allocations -%}
                        <li>{{ discount.discount_application.title | escape }}</li>
                      {%- endfor -%}
                    </ul>
                  {% endif %}

                  <style>
                    .cart-items__sale-info {
                      margin-top: var(--margin-xs);
                    }
                  </style>

                  {% render 'product-sale-info'
                    , product: item.product
                    , product_variant: item.variant
                    , variant_sale: section.settings.variant_sale
                    , allproducts_sale: section.settings.allproducts_sale
                    , hide_rewards: true
                  %}

                  {%- comment -%} Pickup Availability Select for Cart {%- endcomment -%}
                  {%- liquid
                    if item.product.metafields.inv_qty
                      assign strlen = item.product.metafields.inv_qty | json | size
                    else
                      assign strlen = 0
                    endif
                  -%}

                  {% if strlen > 2 and template.name == 'cart' %}
                    <div class="pickup-locations cart-pickup-select" style="margin-top: var(--margin-xs);">
                      <div
                        id="pickup_select_holder_{{ item.variant.id }}"
                        class="pickup-select"
                        style="opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0.3s ease;"
                        data-line-id="{{ item.index | plus: 1 }}"
                        data-selected-option="{{ item.properties['Shipping Option'] | default: 'Ship to me' }}"></div>
                    </div>

                    <div
                      style="display: none;"
                      data-inventory-json="{{ item.product.metafields.inv_qty | json | escape }}"
                      data-product-variant-id="{{ item.variant.id }}"
                      data-weight="{{ item.variant.weight }}"></div>
                  {% endif %}
                </td>
                <td
                  class="cart-items__details cart-primary-typography"
                  role="cell"
                  headers="productInformation"
                  style="position: relative;">
                  <div style="display: flex; justify-content: space-between; width: 100%; margin-bottom: 10px;">
                    <button
                      class="button button--tertiary cart-items__remove"
                      type="button"
                      aria-label="{{ 'accessibility.remove_item' | t: title: item.title | escape }}"
                      on:click="/onLineItemRemove/{{ item.index | plus: 1 }}"
                      style="position: absolute; top: 0; right: 0;">
                      {{- 'icon-delete.svg' | inline_asset_content -}}
                      <span class="visually-hidden">Remove</span>
                    </button>
                  </div>
                </td>
                <td
                  class="cart-items__quantity"
                  role="cell"
                  headers="quantity"
                  style="grid-column: 2 / -1;">
                  <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                    <div style="display: flex; align-items: center;">
                      {% render 'quantity-selector'
                        , product: item.product
                        , in_cart_quantity: item.quantity
                        , line_index: item.index
                        , min: 0
                        , class: 'cart-primary-typography'
                      %}
                    </div>

                    <div style="text-align: right; font-weight: 400; display: flex; flex-direction: column;">
                      {% if item.original_price != item.final_price %}
                        <div>
                          <span class="visually-hidden">{{ 'content.price_regular' | t }}</span>
                          <s class="compare-at-price" style="font-size: 16px;">
                            {% if item.variant.compare_at_price > item.original_price %}
                              {{ item.variant.compare_at_price | money }}
                            {% else %}
                              {{ item.original_price | money }}
                            {% endif %}
                          </s>
                        </div>
                        <div>
                          <span class="visually-hidden">{{ 'content.price_sale' | t }}</span>
                          <span style="font-weight: 400; font-size: 16px;">{{ item.final_price | money }}</span>
                        </div>
                      {% else %}
                        {% if item.variant.compare_at_price > item.original_price %}
                          <div>
                            <span class="visually-hidden">{{ 'content.price_regular' | t }}</span>
                            <s class="compare-at-price" style="font-size: 16px;">{{ item.variant.compare_at_price | money }}</s>
                          </div>
                          <div>
                            <span class="visually-hidden">{{ 'content.price_sale' | t }}</span>
                            <span style="font-weight: 400; font-size: 16px;">{{ item.original_price | money }}</span>
                          </div>
                        {% else %}
                          <div>
                            <span class="visually-hidden">{{ 'content.price' | t }}</span>
                            <span style="font-weight: 400; font-size: 16px;">{{ item.original_price | money }}</span>
                          </div>
                        {% endif %}
                      {% endif %}
                    </div>
                  </div>
                </td>
                <td
                  class="cart-items__error hidden"
                  role="cell"
                  ref="cartItemErrorContainer-{{ item.index | plus: 1 }}"
                  headers="quantity">
                  <div class="cart-item__error" role="alert">
                    <span class="svg-wrapper">
                      {{- 'icon-error.svg' | inline_asset_content -}}
                    </span>
                    <small class="cart-item__error-text cart-primary-typography" ref="cartItemError-{{ item.index | plus: 1 }}"></small>
                  </div>
                </td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    </form>
  {%- endif -%}
</div>