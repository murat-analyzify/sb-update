{% liquid  
  assign header_metafield = collection.metafields.custom.header1.value
  assign description_metafield = collection.metafields.custom.coll_description 

  if header_metafield != blank
    assign coll_header = header_metafield 
  else
    assign coll_header = collection.title 
  endif

  if description_metafield != blank
    assign coll_description = description_metafield 
  endif
%}

{% style %} 
.collection-banner-content {
  max-width: 1050px;
  text-align: center;
  margin: auto;
  padding-top: {{ section.settings.padding_top }}px;
  padding-bottom: {{ section.settings.padding_bottom }}px;
  padding-left: {{ section.settings.padding_left }}px;
  padding-right: {{ section.settings.padding_right }}px;
  
  @media screen and (max-width: 750px) {
    padding: 8px 4px;
  }
}

.collection-header {
  font-size: 32px;
  line-height: 31px;
  font-weight: 700;
  margin-bottom: 16px;
  text-transform: capitalize;
    
    @media screen and (max-width: 750px) {
        font-size: 22px;
        margin-bottom: 8px;
    }
}

.collection-description-wrapper {
  position: relative;
}

.collection-description {
  font-size: 16px;
  line-height: 110%;
  letter-spacing: -0.01em;
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  text-overflow: ellipsis;
    @media screen and (max-width: 750px) {
        font-size: 14px;
        line-height: 120%;
    }
}

.description-toggle {
  display: none;
}

.description-toggle:checked + .collection-description {
  -webkit-line-clamp: unset;
  max-height: none;
}

.read-more-btn,
.read-less-btn {
  font-size: 14px;
  color: currentColor;
  opacity: 0.6;
  cursor: pointer;
  background: none;
  border: none;
  padding: 0;
  transition: opacity 0.3s ease;
}

.read-more-btn:hover,
.read-less-btn:hover {
  opacity: 0.8;
}

/* Varsayılan: butonları gizle */
.read-more-btn,
.read-less-btn {
  display: none;
}

/* Overflow varsa ve checkbox checked değilken: sadece read-more göster */
.collection-description-wrapper.has-overflow .description-toggle:not(:checked) ~ .read-more-btn {
  display: inline-block;
}

/* Overflow varsa ve checkbox checked iken: sadece read-less göster */
.collection-description-wrapper.has-overflow .description-toggle:checked ~ .read-more-btn {
  display: none;
}

.collection-description-wrapper.has-overflow .description-toggle:checked ~ .read-less-btn {
  display: inline-block;
}

{% endstyle %}

<div class="section-{{ section.id }} color-{{ section.settings.color_scheme }}">
  <div class="collection-banner-inner page-width">
    <div class="collection-banner-content">
      
      {% if coll_header != blank %}
        <h1 class="collection-header color-{{ section.settings.color_scheme }}">{{ coll_header }}</h1>
      {% endif %}

      {% if section.settings.show_description and coll_description != blank %}
        <div class="collection-description-wrapper" data-description-wrapper>
          <input type="checkbox" id="description-toggle-{{ section.id }}" class="description-toggle">
          <div class="collection-description" data-description>{{ coll_description }}</div>
          <label for="description-toggle-{{ section.id }}" class="read-more-btn" data-read-more>
            {{ 'content.read_more' | t | default: 'Read more' }}
          </label>
          <label for="description-toggle-{{ section.id }}" class="read-less-btn" data-read-less>
            {{ 'content.read_less' | t | default: 'Read less' }}
          </label>
        </div>
      {% endif %}
      
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    checkDescriptionOverflow();
  });
  
  if (Shopify && Shopify.designMode) {
    document.addEventListener('shopify:section:load', checkDescriptionOverflow);
  }
  
  function checkDescriptionOverflow() {
    const wrapper = document.querySelector('[data-description-wrapper]');
    if (!wrapper) return;
    
    const description = wrapper.querySelector('[data-description]');
    
    if (!description) return;
    
    const clone = description.cloneNode(true);
    clone.style.display = 'block';
    clone.style.webkitLineClamp = 'unset';
    clone.style.webkitBoxOrient = 'unset';
    clone.style.position = 'absolute';
    clone.style.visibility = 'hidden';
    clone.style.width = description.offsetWidth + 'px';
    wrapper.appendChild(clone);
    
    const fullHeight = clone.scrollHeight;
    const clampedHeight = description.clientHeight;
    wrapper.removeChild(clone);
    
    if (fullHeight > clampedHeight + 5) {
      wrapper.classList.add('has-overflow');
    } else {
      wrapper.classList.remove('has-overflow');
    }
  }
</script>

{% schema %}
{
  "name": "Collection Banner",
  "class": "section",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme",
      "default": "background-1"
    },
    {
      "type": "checkbox",
      "id": "show_description",
      "label": "Show Description",
      "default": true
    },
    {
      "type": "header",
      "content": "Section Padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Top",
      "default": 24
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Bottom",
      "default": 24
    },
    {
      "type": "range",
      "id": "padding_left",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Left",
      "default": 24
    },
    {
      "type": "range",
      "id": "padding_right",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Right",
      "default": 24
    }
  ],
  "presets": [
    {
      "name": "Collection Banner"
    }
  ]
}
{% endschema %}