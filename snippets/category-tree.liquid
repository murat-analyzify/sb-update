{%- comment -%} snippets/hierarchy-tree.liquid {%- endcomment -%}

{%- liquid
  assign cat_key = 'filter.p.m.custom.hierarchy_paths'
  assign category_filter = collection.filters | where: 'param_name', cat_key | first
-%}

{%- if category_filter -%}
  {%- liquid
    assign active_value = category_filter.values | where: 'active', true | first
    assign active_label = active_value.label | default: ''
  -%}

  {%- comment -%} Koleksiyonun temsil ettiği "base" dizini bul (metafield > yedek metafield > handle) {%- endcomment -%}
  {%- assign collection_hierarchy = collection.metafields.custom.hierarchy_paths.value | default: collection.metafields.hierarchy.path.value | default: '' -%}
  {%- assign base_prefix = '' -%}

  {%- if collection_hierarchy != blank -%}
    {%- assign base_prefix = collection_hierarchy -%}
  {%- endif -%}

  {%- if base_prefix == blank and active_label == blank and collection.handle != blank -%}
    {%- assign h = collection.handle | replace: 'no-index-', '' -%}
    {%- assign matched_label = '' -%}

    {%- for v in category_filter.values -%}
      {%- assign segs = v.label | split: '/' -%}
      {%- assign slug_flat = '' -%}
      {%- for s in segs -%}
        {%- assign seg_slug = s | handleize -%}
        {%- if slug_flat == '' -%}
          {%- assign slug_flat = seg_slug -%}
        {%- else -%}
          {%- assign slug_flat = slug_flat | append: '-' | append: seg_slug -%}
        {%- endif -%}
      {%- endfor -%}

      {%- if slug_flat == h -%}
        {%- assign matched_label = v.label -%}
        {%- break -%}
      {%- endif -%}
    {%- endfor -%}

    {%- if matched_label != '' -%}
      {%- assign base_prefix = matched_label -%}
    {%- endif -%}
  {%- endif -%}

  {%- comment -%} active_label boşsa base'i aktif gibi kabul et {%- endcomment -%}
  {%- if active_label == blank and base_prefix != blank -%}
    {%- assign active_label = base_prefix -%}
  {%- endif -%}

  {%- comment -%} Derinlik ve ebeveyn prefiksleri {%- endcomment -%}
  {%- if active_label == blank -%}
    {%- assign parent_prefix = '' -%}
  {%- else -%}
    {%- assign active_parts = active_label | split: '/' -%}
    {%- assign parent_prefix = active_label -%}
  {%- endif -%}

  <div
    class="htree"
    data-htree
    data-cat-key="{{ cat_key }}"
    data-base-prefix="{{ base_prefix }}"
    data-section-id="{{ section.id }}"
    data-results-section-id="{{ section.id }}">

    {%- if active_label != blank -%}
      <nav class="htree__breadcrumb">
        {%- assign parts_for_filter = '' -%}
        {%- assign active_parts = active_label | split: '/' -%}
        {%- for part in active_parts -%}
          {%- if parts_for_filter == blank -%}
            {%- assign parts_for_filter = part -%}
          {%- else -%}
            {%- assign parts_for_filter = parts_for_filter | append: '/' | append: part -%}
          {%- endif -%}

          {%- unless forloop.first -%}
            <span class="sep">›</span>
          {%- endunless -%}

          {%- if forloop.last -%}
            <span class="htree__current">{{ part }}</span>
          {%- else -%}
            <button 
              class="htree__crumb" 
              type="button"
              data-filter-value="{{ parts_for_filter }}"
              onclick="htreeNavigate(this)">
              {{ part }}
            </button>
          {%- endif -%}
        {%- endfor -%}
      </nav>
    {%- endif -%}

    <ul class="htree__list">
      {%- comment -%}
        Liste: base_prefix yoksa ilk seviyeyi göster.
        base_prefix veya parent_prefix varsa, sadece bir alt seviye göster.
      {%- endcomment -%}

      {%- if base_prefix == blank and parent_prefix == blank -%}
        {%- assign processed_roots = '' | split: ',' -%}
        {%- for value in category_filter.values -%}
          {%- assign parts = value.label | split: '/' -%}
          {%- assign root_name = parts.first -%}
          {%- unless processed_roots contains root_name -%}
            {%- assign processed_roots = processed_roots | push: root_name -%}

            {%- assign root_count = 0 -%}
            {%- for v in category_filter.values -%}
              {%- assign v_parts = v.label | split: '/' -%}
              {%- if v_parts.first == root_name -%}
                {%- assign root_count = root_count | plus: v.count -%}
              {%- endif -%}
            {%- endfor -%}

            {%- assign has_children = false -%}
            {%- for v in category_filter.values -%}
              {%- assign v_parts2 = v.label | split: '/' -%}
              {%- if v_parts2.size > 1 and v_parts2.first == root_name -%}
                {%- assign has_children = true -%}{%- break -%}
              {%- endif -%}
            {%- endfor -%}

            <li>
              <label class="htree__row" for="htree-{{ root_name | handleize }}" onclick="htreeSelectFilter('{{ root_name }}', event)">
                <input
                  type="checkbox"
                  id="htree-{{ root_name | handleize }}"
                  name="{{ cat_key }}"
                  value="{{ root_name }}"
                  style="display: none;"
                  ref="facetInputs[]"
                >
                <span class="htree__name">{{ root_name }}</span>
                <span class="htree__meta">
                  {%- if root_count > 0 -%}
                    <span class="htree__count">{{ root_count }}</span>
                  {%- endif -%}
                  {%- if has_children -%}
                    <span class="htree__chev">›</span>
                  {%- endif -%}
                </span>
              </label>
            </li>
          {%- endunless -%}
        {%- endfor -%}

      {%- else -%}
        {%- assign anchor_prefix = base_prefix | default: parent_prefix -%}
        {%- assign anchor_depth = anchor_prefix | split: '/' | size -%}
        {%- assign want_depth = anchor_depth | plus: 1 -%}

        {%- assign processed_paths = '' | split: ',' -%}

        {%- for value in category_filter.values -%}
          {%- assign parts = value.label | split: '/' -%}
          {%- assign depth = parts.size -%}
          {%- if depth != want_depth -%}{%- continue -%}{%- endif -%}

          {%- assign probe = anchor_prefix | append: '/' -%}
          {%- if value.label == anchor_prefix -%}{%- continue -%}{%- endif -%}
          {%- unless value.label contains probe -%}{%- continue -%}{%- endunless -%}

          {%- unless processed_paths contains value.label -%}
            {%- assign processed_paths = processed_paths | push: value.label -%}
            {%- assign name = parts | last -%}

            {%- assign has_children = false -%}
            {%- assign child_probe = value.label | append: '/' -%}
            {%- for v2 in category_filter.values -%}
              {%- if v2.label != value.label and v2.label contains child_probe -%}
                {%- assign has_children = true -%}{%- break -%}
              {%- endif -%}
            {%- endfor -%}

            <li>
              <label class="htree__row" for="htree-{{ value.label | handleize }}" onclick="htreeSelectFilter('{{ value.label }}', event)">
                <input
                  type="checkbox"
                  id="htree-{{ value.label | handleize }}"
                  name="{{ cat_key }}"
                  value="{{ value.label }}"
                  {% if value.active %}checked{% endif %}
                  style="display: none;"
                  ref="facetInputs[]"
                >
                <span class="htree__name">{{ name }}</span>
                <span class="htree__meta">
                  {%- if value.count -%}
                    <span class="htree__count">{{ value.count }}</span>
                  {%- endif -%}
                  {%- if has_children -%}
                    <span class="htree__chev">›</span>
                  {%- endif -%}
                </span>
              </label>
            </li>
          {%- endunless -%}
        {%- endfor -%}
      {%- endif -%}
    </ul>

    <style>
      .htree__breadcrumb { margin-bottom: .5rem; font-size: 14px }
      .htree__breadcrumb .htree__crumb { 
        background: none; 
        border: none; 
        color: #333; 
        text-decoration: none; 
        cursor: pointer;
        padding: 0;
        font: inherit;
      }
      .htree__breadcrumb .htree__crumb:hover { text-decoration: underline }
      .htree__breadcrumb .sep { margin: 0 4px; color: #999 }
      .htree__current { font-weight: 600; color: #222 }
      .htree__list { list-style: none; margin: 0; padding: 0 }
      .htree__row { display: flex; align-items: center; justify-content: space-between; padding: 6px 0; text-decoration: none; color: #222; cursor: pointer }
      .htree__row:hover { text-decoration: underline }
      .htree__meta { display: inline-flex; gap: 8px; align-items: center }
      .htree__count { font-size: 12px; color: #666 }
      .htree__chev { font-weight: 600 }
    </style>

    <script>
      // URL bazlı breadcrumb navigasyonu (üst dizinlere çıkma - URL değişimi ile)
      function htreeNavigate(button) {
        const filterValue = button.dataset.filterValue;
        const htreeContainer = document.querySelector('[data-htree]');
        const catKey = htreeContainer.dataset.catKey;
        
        // Mevcut URL parametrelerini al
        const currentUrl = new URL(window.location);
        const searchParams = new URLSearchParams(currentUrl.search);
        
        if (!filterValue) {
          // Ana collections sayfasına git ama diğer filtreleri koru
          const newUrl = new URL('/collections', window.location.origin);
          // Hierarchy dışındaki tüm parametreleri koru (sort_by dahil)
          for (const [key, value] of searchParams.entries()) {
            if (key !== catKey) {
              newUrl.searchParams.append(key, value);
            }
          }
          window.location.href = newUrl.toString();
          return;
        }
        
        // womans/clothings -> womans-clothings şeklinde çevir
        const urlHandle = filterValue
          .toLowerCase()
          .split('/')
          .map(part => part.trim().replace(/&/g, '-'))  // & işaretini - ile değiştir
          .join('-')
          .replace(/[^a-z0-9-]/g, '')  // Sadece harf, rakam ve tire
          .replace(/-+/g, '-')         // Çoklu tireleri tek tire yap
          .replace(/^-+|-+$/g, '');    // Başta ve sonda olan tireleri kaldır
        
        // Yeni collection URL'ini oluştur
        const newUrl = new URL(`/collections/no-index-${urlHandle}`, window.location.origin);
        
        // Mevcut filtreleri yeni URL'e ekle (hierarchy hariç, sort_by dahil)
        for (const [key, value] of searchParams.entries()) {
          if (key !== catKey) {
            newUrl.searchParams.append(key, value);
          }
        }
        
        // Yeni hierarchy değerini ekle
        newUrl.searchParams.set(catKey, filterValue);
        
        // Collection URL'ine git (diğer filtreler korunarak)
        window.location.href = newUrl.toString();
      }
      
      // Filter bazlı kategori seçimi (alt dizinlere inme - filtre ile)
      function htreeSelectFilter(filterValue, event) {
        if (event) {
          event.preventDefault();
        }
        
        const htreeContainer = document.querySelector('[data-htree]');
        const catKey = htreeContainer.dataset.catKey;
        
        // TÜM aynı kategorideki checkbox'ları temizle
        const allInputs = document.querySelectorAll(`input[name="${catKey}"]`);
        allInputs.forEach(input => {
          input.checked = false;
        });
        
        // Sadece seçilen değeri aktif et
        const targetInput = document.querySelector(`input[name="${catKey}"][value="${filterValue}"]`);
        if (targetInput) {
          targetInput.checked = true;
          targetInput.dispatchEvent(new Event('change', { bubbles: true }));
        } else {
          // Eğer bu seviye için checkbox yoksa, form submit ile filtreyi uygula
          const form = document.querySelector('form[data-section-type="collection-filters"]') || 
                      document.querySelector('.facets-form') ||
                      document.querySelector('form');
          
          if (form) {
            // Önceki gizli inputları temizle
            const existingHiddens = form.querySelectorAll(`input[type="hidden"][name="${catKey}"]`);
            existingHiddens.forEach(hidden => hidden.remove());
            
            // Geçici bir hidden input oluştur
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = catKey;
            hiddenInput.value = filterValue;
            form.appendChild(hiddenInput);
            
            // Formu submit et
            form.submit();
          }
        }
      }
    </script>
    
  </div>
{%- endif -%}