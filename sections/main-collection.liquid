{% stylesheet %}
  .main-collection-grid {
    grid-column: var(--grid-column--mobile);
    @media screen and (width > = 750px) {
      grid-column: var(--grid-column--desktop);
    }
  }

  .collection-wrapper {
  @media screen and (width > = 750px) {
    grid-template-columns: 1fr repeat(var(--centered-column-number), minmax(0, calc((var(--page-width) - var(--page-margin) * 2) / var(--centered-column-number)))) 1fr;
  }
}

.collection-wrapper:has(.facets-block-wrapper--full-width),
.collection-wrapper:has(.collection-wrapper--full-width) {
@media screen and (width > = 750px) {
  grid-column: 1 / -1;
  grid-template-columns: minmax(var(--page-margin), 1fr) repeat(var(--centered-column-number), minmax(0, calc((var(--page-width) - var(--page-margin) * 2) / var(--centered-column-number)))) minmax(var(--page-margin), 1fr);
}
}

.collection-wrapper:has(.facets--vertical) .main-collection-grid {
@media screen and (width > = 750px) {
  grid-column: var(--facets-vertical-col-width) / var(--full-width-column-number);
}
}

.collection-wrapper:has(.facets-block-wrapper--vertical:not(#filters-drawer)):has(.collection-wrapper--full-width) {
@media screen and (width > = 750px) {
  grid-column: 1 / -1;
  grid-template-columns: 0 repeat(var(--centered-column-number), minmax(0, 1fr)) 0;
}
}

:is(.collection-wrapper--full-width, .collection-wrapper--full-width-on-mobile) [product-grid-view='default'] .product-grid__item .group-block {
@media screen and (width < 750px) {
  padding-inline-start: max(var(--padding-xs), var(--padding-inline-start));
  padding-inline-end: max(var(--padding-xs), var(--padding-inline-end));
}
}

:is(.collection-wrapper--full-width, .collection-wrapper--full-width-on-mobile) [product-grid-view='mobile-single'] .product-grid__item .group-block {
@media screen and (width < 750px) {
  padding-inline-start: max(var(--padding-xs), var(--padding-inline-start));
  padding-inline-end: max(var(--padding-xs), var(--padding-inline-end));
}
}

/* Facets Horizontal Sticky CSS */
.facets-block-wrapper--horizontal {
  @media screen and (width >= 750px) {
    position: sticky;
    top: calc(var(--header-height, 52px) + var(--mega-menu-height, 0px) - 10px);
    z-index: 1;
    background-color: var(--color-background);
    transition: box-shadow 0.2s ease;
  }
}
{% endstylesheet %}
{% liquid
  # Onboarding: When no products are available, we show placeholder items
  assign products = ''
  if request.design_mode and shop.products_count == 0
    for i in (1..16)
      assign products = products | append: ' ,'
    endfor
    assign products = products | split: ','
  endif

  # Extract color filter group value from URL filters
  assign global_color_filter_group = null
  for filter in collection.filters
    if filter.param_name == 'filter.p.m.custom.color_filter_group'
      for active_value in filter.active_values
        assign global_color_filter_group = active_value.value
        break
      endfor
      break
    endif
  endfor
%}

<script src="{{ 'results-list.js' | asset_url }}" type="module"></script>

{% javascript %}
  const url = new URL(window.location.href);
  if (url.hash) {
    document.addEventListener('DOMContentLoaded', () => {
      const card = document.getElementById(url.hash.slice(1));
      if (card) {
        card.scrollIntoView({behavior: 'instant'});
      }
    }, {once: true});
  }
{% endjavascript %}

{% comment %} We always render this full-width, as the child blocks have width: page/full settings {% endcomment %}
<div class="section-background color-{{ section.settings.color_scheme }}"></div>
<results-list
  class="section product-grid-container color-{{ section.settings.color_scheme }}"
  style="--padding-block-start: {{ section.settings.padding-block-start }}px; --padding-block-end: {{ section.settings.padding-block-end }}px;"
  section-id="{{ section.id }}">
  {% render 'skip-to-content-link'
    , href: '#ResultsList'
    , text: 'accessibility.skip_to_results_list' %}

  <div class="collection-wrapper grid gap-style">
    {% content_for 'block'
      , type: 'filters'
      , id: 'filters'
      , results: collection
      , results_size: collection.products_count
    %}

    {% if request.design_mode and shop.products_count == 0 %}
      {% paginate products by 72 %}
        {% capture children %}
          {% for product in products %}
            <li
              class="product-grid__item product-grid__item--{{ forloop.index0 }}"
              data-page="{{ paginate.current_page }}"
              data-product-id="{{ product.id }}"
              data-view-transition-id="{{ product.id }}"
              ref="cards[]"
            >
              {% render 'product-card', product: product, color_filter_group: global_color_filter_group %}
            </li>
          {% endfor %}
        {% endcapture %}
        {% render 'product-grid'
          , section: section
          , children: children
          , products: products
          , paginate: paginate %}
      {% endpaginate %}
    {% else %}
      {% paginate collection.products by 72 %}
        {% capture children %}
          {% assign global_card_index = 0 %}
          {% assign cards_rendered = 0 %}
          {% assign max_cards_per_page = 72 %}
          
          {% for product in collection.products %}
            {% comment %} Show all products without any filtering {% endcomment %}
            {% assign show_product = true %}
            
            {% if show_product %}
              {% assign show_multiple_colors = false %}
              {% for tag in product.tags %}
                {% if tag == 'show_multiple_color' %}
                  {% assign show_multiple_colors = true %}
                  {% break %}
                {% endif %}
              {% endfor %}
              
              {% comment %} If color filter is active, disable split by color functionality {% endcomment %}
              {% if global_color_filter_group %}
                {% assign show_multiple_colors = false %}
              {% endif %}
            
            {% if show_multiple_colors and product.variants.size > 1 %}
              {% comment %} Find color option and render separate cards for each color {% endcomment %}
              {% assign color_option = null %}
              {% for option in product.options_with_values %}
                {% assign option_name_lower = option.name | downcase %}
                {% if option_name_lower contains 'color'  %}
                  {% assign color_option = option %}
                  {% break %}
                {% endif %}
              {% endfor %}
              
              {% if color_option %}
                {% assign processed_colors = '' %}
                {% assign color_position = color_option.position | minus: 1 %}
                {% for variant in product.variants %}
                  {% comment %} Break if we've reached the maximum cards per page {% endcomment %}
                  {% if cards_rendered >= max_cards_per_page %}
                    {% break %}
                  {% endif %}
                  
                  {% comment %} Show all variants without stock filtering {% endcomment %}
                  {% assign show_variant = true %}
                  
                  {% if show_variant %}
                    {% assign color_value = variant.options[color_position] %}
                    {% assign color_check = '|' | append: color_value | append: '|' %}
                    {% assign processed_check = '|' | append: processed_colors | append: '|' %}
                    {% unless processed_check contains color_check %}
                      <li
                        id="{{ section.id }}-{{ product.id }}-{{ variant.id }}"
                        class="product-grid__item product-grid__item--{{ global_card_index }}"
                        data-page="{{ paginate.current_page }}"
                        data-product-id="{{ product.id }}"
                        data-variant-id="{{ variant.id }}"
                        data-color="{{ color_value }}"
                        ref="cards[]"
                      >
                        {% # theme-check-disable %}
                        {% render 'product-card', product: product, variant: variant, color_filter_group: global_color_filter_group %}
                        {% # theme-check-enable %}
                      </li>
                      {% assign global_card_index = global_card_index | plus: 1 %}
                      {% assign cards_rendered = cards_rendered | plus: 1 %}
                      {% if processed_colors == '' %}
                        {% assign processed_colors = color_value %}
                      {% else %}
                        {% assign processed_colors = processed_colors | append: '|' | append: color_value %}
                      {% endif %}
                    {% endunless %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% comment %} If no color option found, show first variant only if we haven't reached limit {% endcomment %}
                {% if cards_rendered < max_cards_per_page %}
                  {% assign first_variant = product.variants.first %}
                  <li
                    id="{{ section.id }}-{{ product.id }}-{{ first_variant.id }}"
                    class="product-grid__item product-grid__item--{{ global_card_index }}"
                    data-page="{{ paginate.current_page }}"
                    data-product-id="{{ product.id }}"
                    data-variant-id="{{ first_variant.id }}"
                    ref="cards[]"
                  >
                    {% # theme-check-disable %}
                    {% render 'product-card', product: product, variant: first_variant, color_filter_group: global_color_filter_group %}
                    {% # theme-check-enable %}
                  </li>
                  {% assign global_card_index = global_card_index | plus: 1 %}
                  {% assign cards_rendered = cards_rendered | plus: 1 %}
                {% endif %}
              {% endif %}
            {% else %}
              {% comment %} Render normal product card if we haven't reached limit {% endcomment %}
              {% if cards_rendered < max_cards_per_page %}
                <li
                  id="{{ section.id }}-{{ product.id }}"
                  class="product-grid__item product-grid__item--{{ global_card_index }}"
                  data-page="{{ paginate.current_page }}"
                  data-product-id="{{ product.id }}"
                  ref="cards[]"
                >
                  {% # theme-check-disable %}
                  {% render 'product-card', product: product, color_filter_group: global_color_filter_group %}
                  {% # theme-check-enable %}
                </li>
                {% assign global_card_index = global_card_index | plus: 1 %}
                {% assign cards_rendered = cards_rendered | plus: 1 %}
              {% endif %}
            {% endif %}
            {% endif %}
          {% endfor %}
        {% endcapture %}
        {% render 'product-grid'
          , section: section
          , children: children
          , products: collection.products
          , paginate: paginate
        %}
      {% endpaginate %}
    {% endif %}
  </div>
</results-list>

{% schema %}
  {
    "name": "t:names.collection_container",
    "enabled_on": {
      "templates": ["collection"]
    },
    "settings": [
      {
        "type": "select",
        "id": "layout_type",
        "label": "t:settings.type",
        "options": [
          {
            "value": "grid",
            "label": "t:options.grid"
          }, {
            "value": "organic",
            "label": "t:options.editorial"
          }
        ],
        "default": "grid"
      },
      {
        "type": "select",
        "id": "product_card_size",
        "label": "t:settings.card_size",
        "options": [
          {
            "value": "small",
            "label": "t:options.small"
          }, {
            "value": "medium",
            "label": "t:options.medium"
          }, {
            "value": "large",
            "label": "t:options.large"
          }, {
            "value": "extra-large",
            "label": "t:options.extra_large"
          }
        ],
        "default": "medium",
        "visible_if": "{{ section.settings.layout_type == 'grid' }}"
      },
      {
        "type": "select",
        "id": "mobile_product_card_size",
        "label": "t:settings.mobile_card_size",
        "options": [
          {
            "value": "small",
            "label": "t:options.small"
          }, {
            "value": "large",
            "label": "t:options.large"
          }
        ],
        "default": "small"
      },
      {
        "type": "header",
        "content": "t:content.layout"
      }, {
        "type": "select",
        "id": "product_grid_width",
        "label": "t:settings.width",
        "options": [
          {
            "value": "centered",
            "label": "t:options.page"
          }, {
            "value": "full-width",
            "label": "t:options.full"
          }
        ],
        "default": "centered"
      }, {
        "type": "checkbox",
        "id": "full_width_on_mobile",
        "label": "t:settings.full_width_on_mobile",
        "default": true,
        "visible_if": "{{ section.settings.product_grid_width != 'full-width' }}"
      }, {
        "type": "range",
        "id": "columns_gap_horizontal",
        "label": "t:settings.horizontal_gap",
        "min": 0,
        "max": 50,
        "step": 1,
        "unit": "px",
        "default": 16
      }, {
        "type": "range",
        "id": "columns_gap_vertical",
        "label": "t:settings.vertical_gap",
        "min": 0,
        "max": 50,
        "step": 1,
        "unit": "px",
        "default": 16
      }, {
        "type": "range",
        "id": "padding-inline-start",
        "label": "t:settings.left_padding",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "default": 0
      }, {
        "type": "range",
        "id": "padding-inline-end",
        "label": "t:settings.right_padding",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "default": 0
      }, {
        "type": "header",
        "content": "t:content.section_layout"
      }, {
        "type": "color_scheme",
        "id": "color_scheme",
        "label": "t:settings.color_scheme",
        "default": "scheme-1"
      }, {
        "type": "range",
        "id": "padding-block-start",
        "label": "t:settings.top_padding",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "default": 8
      }, {
        "type": "range",
        "id": "padding-block-end",
        "label": "t:settings.bottom_padding",
        "min": 0,
        "max": 100,
        "step": 1,
        "unit": "px",
        "default": 8
      }
    ],
    "presets": []
  }
{% endschema %}